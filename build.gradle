
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'java'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

task wrapper(type:wrapper){
    gradleVersion = '3.4.1'
}

try {
    version= "${project.buildNumber}"
    println "seeting version to '${version}'"
} catch (MissingPropertyException ignored){
    println "using default version: add -PbuildNumber = x.x.x to override"
    //enforce structure on numbering
    version = new Version(major: 1, minor: 2, releaseType: 'SNAPSHOT')
}

// SSL certificate to talk to Artifactory and everything https

System.setProperty('javax.net.ssl.trustStore', "${rootProject.rootDir.path}/gradle/wf-bundle.jks")
System.setProperty('javax.net.ssl.trustStorePassword','nopass')

//extra properties to access enterprise repository
def username1 = System.getenv("ENTERPRISE_ARTIFACTORY_RESOLVER_USERNAME")
def apiKey1 = System.getenv("ENTERPRISE_ARTIFACTORY_RESOLVER_PASSWORD")

try {
    ext {
        artifactoryUsername = Username
        artifactoryApiKey = ApiKey
    }
}catch(MissingPropertyException mpe){
    ext {
        artifactoryUsername = username1
        artifactoryApiKey = apiKey1
    }
}

// application property
ext.application = [
    vendor: 'Wells Fargo',
    group: 'com.charles.1cust',
    version: '0.01'
]

//Project extension

ext {
    // application properties
    application.name = 'CustomerConversationTool'
    application.version = '0.01'

    // cci properties
    cci = [version: '42.0-462']

    //Spring properties
    spring = [version: '4.2.0.RELEASE']

    //spring boot
    springBoot = [version: '1.5.4.RELEASE']

    // JSON
    json = [version = '20160810']

    // Apache CXF properties
    // all bindings are generated by Apache CXF. To add a new binding, just copy
    //dependent schemas into resources/schemas and add a the path to the WSDL to the array below
    cxf = [version: '3.1.6']

    //WEBATM PROPERTIES
    webatmutils = [version: '004.35247']

    //WEB ATM CORE
    webatmcore = [version: '0013.35241']

    //Channel Server JSK
    ChannelServerJSK = [version: '005.37068']
}


// REPOSITORIES
//Uses the inernal foss-ware maven central repository
// Additional foss-ware directories  may be nedded besides the central. If you lib is not found the central repo
// locate the lib you need using the foss-ware lib search page, and then add it to the artifactUrls array
repositories {
    maven {
        url 'https://artifactory.charles.com/artifactory/webatm_maven_deploy_virtual'
        credentials {
            username artifactoryUsername
            password artifactoryApiKey
        }
    }
    maven {
        url 'https://artifactory.charles.com/artifactory/remote-cbar-wbatm-maven-remediate'
        credentials {
            username artifactoryUsername
            password artifactoryApiKey
        }
    }
    maven {
        url 'https://artifactory.charles.com/artifactory/onecust_maven_deploy_virtual'
        credentials {
            username artifactoryUsername
            password artifactoryApiKey
        }
    }
}

// DEPENDENCIES
dependencies {
    compile 'javax.servlet:javax.servlet-api:3.1.0'
    compile 'commons-lang:commons-lang:2.6'
    compile 'commons-io:commons-io:2.4'
    compile 'org.apache.commons:commons-dbcp2:2.1.1'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-io:commons-io:2.4'
    compile files('lib/ojdbc6-11.2.0.2.0.jar')
    compile files('rws/customerforms.jar')
    compile files('rws/customerforms-javadoc.jar')
    compile 'com.charles.component.messaging.bindings:wf_jaxb_wfxml20_base:1.0'
    compile 'com.charles.component.messaging.bindings:wf_jaxb_wfxml21_message:1.1'

    //cxf
    compile "org.apache.cxf:cxf:${project.cxf.version}"
    compile "org.apache.cxf:cxf-rt-transports-http:${project.cxf.version}"
    compile "org.apache.cxf:cxf-rt-frontend-jaxws:${project.cxf.version}"
    compile "org.apache.cxf:cxf-tools:${project.cxf.version}"
    compile "org.apache.cxf:cxf-tools-wsd;tp-databinding-jaxb:${project.cxf.version}"
    compile "org.apache.cxf:cxf-rt-frontend-jaxws:${project.cxf.version}"

    //cci jars
    compile ("cci-core:heartvear:${project.cci.version}") {
        exclude group: "log4j"
        exclude group: "cci-core"
    }
    compile ("cci-core:configuration:${project.cci.version}"){
        exclude group: "log4j"
    }

    // Jackson Mapper
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.3.3'
    compiel 'com.fasterxml.jackson.core:jackson-core:2.3.3'

    //hibernate dependencies
    compile 'org.hibernate:hibernate-entitymanager: 4.3.8.Final'

    //WEBATMCORE
    compile "WebATM.WebATMCore:infrastructure:${project.webatmcore.version}"

    // Channel Server JSK
    compile "WebATM:ChannelServerJSK:${project.ChannelSErverJSK.version}"

    //JSR 303 validator
    compile 'org.hibernate:hibernate-validator:5.0.2.Final'

    //JTA transaction
    compile 'javax.transaction:jta:1.1'
    compile 'joda-time:joda-time:2.7'
    compile 'org.threeten:threetenbp:0.7.2'

    //Tomcat dependency required for compile time
    providedCompile 'org.apache.tomcat:tomcat-coyote:7.0.55'
    compile 'org.bouncycastle:bcprov-jdk15on:1.55'

    //LOG4J2
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.7'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.7'
    compile group: 'org.apache.logging.log4j', name: 'log4j-web', version: '2.7'

    //Spring dependencies
    compile 'org.springframework.data:spring-data-oracle:1.1.0.RELEASE'

    //Spring Security
    compile 'org.springframework.security:spring-security-web:4.2.3.RELEASE'
    compile 'org.springframework.security:spring-security-config:4.2.3.RELEASE'
    compile 'org.springframework.security:spring-security-ldap:4.2.3.RELEASE'

    //Spring BootDependencies
    compile "org.springframework.boot:spring-boot-gradle-plugin:${project.springBoot.version}"
    compile "org.springframework.boot:spring-boot-starter-data-jpa:${project.springBoot.version}"
    compile "org.springframework.boot:spring-boot-starter-jdbc:${project.springBoot.version}"
    compile "org.springframework.boot:spring-boot-starter-web:${project.springBoot.version}"
    compile "com.github.ulisesbocchio:jasypt-spring-boot-starter:1.14"
    compile "org.jasypt:jasypt-spring31:1.9.2"


    //Test Dependencies
    testCompile 'org.springframework.boot:spring-boot-starter-test:1.5.4.RELEASE'    

}

// WAR File
// War files will have a manifest created with all the app properties inserted

war {
    baseName = project.application.name
    manifest {
        attributes(
            "Implementation-Vendor": project.application.vendor,
            "Implementation-Version": project.application.version
        )
    }
}

class Version {
    int major
    int minor
    int bugfix
    String releaseTyep

    String toString() {"$major.$minor-$releaseType${bugfix ?: ''}"}
}

// GENERATE MD 5
// Generates for all jars and wars
tasks.withType(Zip) {
    task -> {
        task.doLast {
            println "Generating MD5 artifact"
            ant.checksum file: it.archivePath
        }
    }

}

// compile task
// compile insures all generated bindings are up to date.

compileJava {
    //dependsOn generate
}

task artifacts {
    dependsOn build
}


task testEnviromentInitialization {
    File coreConfigDir = 
        new File(
            new File(
                new File(java.nio.file.Paths.get('').toAbsolutePath().toString(),
                            'WebContent'),
                'META-INF'),
            'conf')
    test.systemProperties['core.config.dir'] = coreConfigDir.getAbsolutePath()
    test.systemProperties['core.config.env'] = 'development'
    test.systemProperties['core.config.instance'] = 'tc'    
        
}

test.dependsOn testEnviromentInitialization






































